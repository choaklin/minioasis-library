/*
 * This file is generated by jOOQ.
*/
package org.minioasis.library.jooq.tables;


import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.minioasis.library.jooq.Indexes;
import org.minioasis.library.jooq.Keys;
import org.minioasis.library.jooq.Public;
import org.minioasis.library.jooq.tables.records.ItemRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Item extends TableImpl<ItemRecord> {

    private static final long serialVersionUID = -597353067;

    /**
     * The reference instance of <code>PUBLIC.ITEM</code>
     */
    public static final Item ITEM = new Item();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemRecord> getRecordType() {
        return ItemRecord.class;
    }

    /**
     * The column <code>PUBLIC.ITEM.ID</code>.
     */
    public final TableField<ItemRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.ITEM.ACTIVE</code>.
     */
    public final TableField<ItemRecord, String> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.field("'Y'", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>PUBLIC.ITEM.BARCODE</code>.
     */
    public final TableField<ItemRecord, String> BARCODE = createField("BARCODE", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ITEM.CHECKED</code>.
     */
    public final TableField<ItemRecord, String> CHECKED = createField("CHECKED", org.jooq.impl.SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ITEM.CREATED</code>.
     */
    public final TableField<ItemRecord, Timestamp> CREATED = createField("CREATED", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ITEM.EXPIRED</code>.
     */
    public final TableField<ItemRecord, Date> EXPIRED = createField("EXPIRED", org.jooq.impl.SQLDataType.DATE.defaultValue(org.jooq.impl.DSL.field("'1970-01-01'", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * The column <code>PUBLIC.ITEM.FIRST_CHECKIN</code>.
     */
    public final TableField<ItemRecord, Timestamp> FIRST_CHECKIN = createField("FIRST_CHECKIN", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ITEM.LAST_CHECKIN</code>.
     */
    public final TableField<ItemRecord, Timestamp> LAST_CHECKIN = createField("LAST_CHECKIN", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>PUBLIC.ITEM.LAST_FULL_RENEW_PERSON</code>.
     */
    public final TableField<ItemRecord, String> LAST_FULL_RENEW_PERSON = createField("LAST_FULL_RENEW_PERSON", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>PUBLIC.ITEM.PRICE</code>.
     */
    public final TableField<ItemRecord, BigDecimal> PRICE = createField("PRICE", org.jooq.impl.SQLDataType.DECIMAL(12, 2).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ITEM.SHELF_MARK</code>.
     */
    public final TableField<ItemRecord, String> SHELF_MARK = createField("SHELF_MARK", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>PUBLIC.ITEM.SOURCE</code>.
     */
    public final TableField<ItemRecord, String> SOURCE = createField("SOURCE", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>PUBLIC.ITEM.BORROWABLE</code>.
     */
    public final TableField<ItemRecord, Boolean> BORROWABLE = createField("BORROWABLE", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ITEM.RESERVABLE</code>.
     */
    public final TableField<ItemRecord, Boolean> RESERVABLE = createField("RESERVABLE", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ITEM.STATE</code>.
     */
    public final TableField<ItemRecord, String> STATE = createField("STATE", org.jooq.impl.SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ITEM.PUBLISHING_DATE</code>.
     */
    public final TableField<ItemRecord, Date> PUBLISHING_DATE = createField("PUBLISHING_DATE", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>PUBLIC.ITEM.VOLUME_NO</code>.
     */
    public final TableField<ItemRecord, String> VOLUME_NO = createField("VOLUME_NO", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>PUBLIC.ITEM.BIBLIO_ID</code>.
     */
    public final TableField<ItemRecord, Long> BIBLIO_ID = createField("BIBLIO_ID", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>PUBLIC.ITEM.ITEM_DURATION_ID</code>.
     */
    public final TableField<ItemRecord, Long> ITEM_DURATION_ID = createField("ITEM_DURATION_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ITEM.ITEM_STATUS_ID</code>.
     */
    public final TableField<ItemRecord, Long> ITEM_STATUS_ID = createField("ITEM_STATUS_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ITEM.LOCATION_ID</code>.
     */
    public final TableField<ItemRecord, Long> LOCATION_ID = createField("LOCATION_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.ITEM</code> table reference
     */
    public Item() {
        this(DSL.name("ITEM"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.ITEM</code> table reference
     */
    public Item(String alias) {
        this(DSL.name(alias), ITEM);
    }

    /**
     * Create an aliased <code>PUBLIC.ITEM</code> table reference
     */
    public Item(Name alias) {
        this(alias, ITEM);
    }

    private Item(Name alias, Table<ItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private Item(Name alias, Table<ItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_ITEM_BIBLIO_INDEX_2, Indexes.FK_ITEM_ITEMDURATION_INDEX_2, Indexes.FK_ITEM_ITEMSTATUS_INDEX_2, Indexes.FK_ITEM_LOCATION_INDEX_2, Indexes.PRIMARY_KEY_2, Indexes.UK_BFO0NHIH8F3JL9M9UBLNXR4UY_INDEX_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ItemRecord, Long> getIdentity() {
        return Keys.IDENTITY_ITEM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ItemRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ItemRecord>> getKeys() {
        return Arrays.<UniqueKey<ItemRecord>>asList(Keys.CONSTRAINT_2, Keys.UK_BFO0NHIH8F3JL9M9UBLNXR4UY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ItemRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ItemRecord, ?>>asList(Keys.FK_ITEM_BIBLIO, Keys.FK_ITEM_ITEMDURATION, Keys.FK_ITEM_ITEMSTATUS, Keys.FK_ITEM_LOCATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Item as(String alias) {
        return new Item(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Item as(Name alias) {
        return new Item(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Item rename(String name) {
        return new Item(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Item rename(Name name) {
        return new Item(name, null);
    }
}
