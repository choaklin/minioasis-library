/*
 * This file is generated by jOOQ.
*/
package org.minioasis.library.jooq.tables;


import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.minioasis.library.jooq.Indexes;
import org.minioasis.library.jooq.Keys;
import org.minioasis.library.jooq.Public;
import org.minioasis.library.jooq.tables.records.TxnRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Txn extends TableImpl<TxnRecord> {

    private static final long serialVersionUID = 551168925;

    /**
     * The reference instance of <code>PUBLIC.TXN</code>
     */
    public static final Txn TXN = new Txn();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TxnRecord> getRecordType() {
        return TxnRecord.class;
    }

    /**
     * The column <code>PUBLIC.TXN.ID</code>.
     */
    public final TableField<TxnRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.TXN.CREATED</code>.
     */
    public final TableField<TxnRecord, Timestamp> CREATED = createField("CREATED", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>PUBLIC.TXN.CREDIT</code>.
     */
    public final TableField<TxnRecord, BigDecimal> CREDIT = createField("CREDIT", org.jooq.impl.SQLDataType.DECIMAL(12, 2).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TXN.DEBIT</code>.
     */
    public final TableField<TxnRecord, BigDecimal> DEBIT = createField("DEBIT", org.jooq.impl.SQLDataType.DECIMAL(12, 2).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TXN.DESCRIPTION</code>.
     */
    public final TableField<TxnRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TXN.RECORD_BY</code>.
     */
    public final TableField<TxnRecord, String> RECORD_BY = createField("RECORD_BY", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>PUBLIC.TXN.TXN_DATE</code>.
     */
    public final TableField<TxnRecord, Date> TXN_DATE = createField("TXN_DATE", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>PUBLIC.TXN.TXN_PAIR</code>.
     */
    public final TableField<TxnRecord, String> TXN_PAIR = createField("TXN_PAIR", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TXN.UPDATED</code>.
     */
    public final TableField<TxnRecord, Timestamp> UPDATED = createField("UPDATED", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>PUBLIC.TXN.UPDATED_BY</code>.
     */
    public final TableField<TxnRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>PUBLIC.TXN.ACCOUNT_ID</code>.
     */
    public final TableField<TxnRecord, Long> ACCOUNT_ID = createField("ACCOUNT_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TXN.TO_ACCOUNT_ID</code>.
     */
    public final TableField<TxnRecord, Long> TO_ACCOUNT_ID = createField("TO_ACCOUNT_ID", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>PUBLIC.TXN</code> table reference
     */
    public Txn() {
        this(DSL.name("TXN"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.TXN</code> table reference
     */
    public Txn(String alias) {
        this(DSL.name(alias), TXN);
    }

    /**
     * Create an aliased <code>PUBLIC.TXN</code> table reference
     */
    public Txn(Name alias) {
        this(alias, TXN);
    }

    private Txn(Name alias, Table<TxnRecord> aliased) {
        this(alias, aliased, null);
    }

    private Txn(Name alias, Table<TxnRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_TXN_ACCOUNT_INDEX_1, Indexes.FK_TXN_TOACCOUNT_INDEX_1, Indexes.PRIMARY_KEY_14);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TxnRecord, Long> getIdentity() {
        return Keys.IDENTITY_TXN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TxnRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_14;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TxnRecord>> getKeys() {
        return Arrays.<UniqueKey<TxnRecord>>asList(Keys.CONSTRAINT_14);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TxnRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TxnRecord, ?>>asList(Keys.FK_TXN_ACCOUNT, Keys.FK_TXN_TOACCOUNT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Txn as(String alias) {
        return new Txn(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Txn as(Name alias) {
        return new Txn(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Txn rename(String name) {
        return new Txn(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Txn rename(Name name) {
        return new Txn(name, null);
    }
}
