/*
 * This file is generated by jOOQ.
*/
package org.minioasis.library.jooq.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.minioasis.library.jooq.Indexes;
import org.minioasis.library.jooq.Keys;
import org.minioasis.library.jooq.Public;
import org.minioasis.library.jooq.tables.records.AttachmentRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Attachment extends TableImpl<AttachmentRecord> {

    private static final long serialVersionUID = 779865246;

    /**
     * The reference instance of <code>PUBLIC.ATTACHMENT</code>
     */
    public static final Attachment ATTACHMENT = new Attachment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AttachmentRecord> getRecordType() {
        return AttachmentRecord.class;
    }

    /**
     * The column <code>PUBLIC.ATTACHMENT.ID</code>.
     */
    public final TableField<AttachmentRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.ATTACHMENT.BARCODE</code>.
     */
    public final TableField<AttachmentRecord, String> BARCODE = createField("BARCODE", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ATTACHMENT.BORROWABLE</code>.
     */
    public final TableField<AttachmentRecord, String> BORROWABLE = createField("BORROWABLE", org.jooq.impl.SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ATTACHMENT.CALL_NO</code>.
     */
    public final TableField<AttachmentRecord, String> CALL_NO = createField("CALL_NO", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ATTACHMENT.DESCRIPTION</code>.
     */
    public final TableField<AttachmentRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ATTACHMENT.FIRST_CHECKIN</code>.
     */
    public final TableField<AttachmentRecord, Date> FIRST_CHECKIN = createField("FIRST_CHECKIN", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ATTACHMENT.LAST_CHECKIN</code>.
     */
    public final TableField<AttachmentRecord, Date> LAST_CHECKIN = createField("LAST_CHECKIN", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>PUBLIC.ATTACHMENT.STATE</code>.
     */
    public final TableField<AttachmentRecord, String> STATE = createField("STATE", org.jooq.impl.SQLDataType.CHAR(20).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ATTACHMENT.ITEM_ID</code>.
     */
    public final TableField<AttachmentRecord, Long> ITEM_ID = createField("ITEM_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.ATTACHMENT</code> table reference
     */
    public Attachment() {
        this(DSL.name("ATTACHMENT"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.ATTACHMENT</code> table reference
     */
    public Attachment(String alias) {
        this(DSL.name(alias), ATTACHMENT);
    }

    /**
     * Create an aliased <code>PUBLIC.ATTACHMENT</code> table reference
     */
    public Attachment(Name alias) {
        this(alias, ATTACHMENT);
    }

    private Attachment(Name alias, Table<AttachmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Attachment(Name alias, Table<AttachmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_ATTACHMENT_ITEM_INDEX_A, Indexes.PRIMARY_KEY_A, Indexes.UK_ODYTD07MTGMJLAEF9T1WGKVPC_INDEX_A);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AttachmentRecord, Long> getIdentity() {
        return Keys.IDENTITY_ATTACHMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AttachmentRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_A;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AttachmentRecord>> getKeys() {
        return Arrays.<UniqueKey<AttachmentRecord>>asList(Keys.CONSTRAINT_A, Keys.UK_ODYTD07MTGMJLAEF9T1WGKVPC);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AttachmentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AttachmentRecord, ?>>asList(Keys.FK_ATTACHMENT_ITEM);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Attachment as(String alias) {
        return new Attachment(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Attachment as(Name alias) {
        return new Attachment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Attachment rename(String name) {
        return new Attachment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Attachment rename(Name name) {
        return new Attachment(name, null);
    }
}
