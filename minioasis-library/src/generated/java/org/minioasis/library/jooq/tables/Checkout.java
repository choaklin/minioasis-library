/*
 * This file is generated by jOOQ.
 */
package org.minioasis.library.jooq.tables;


import java.math.BigDecimal;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.minioasis.library.jooq.DefaultSchema;
import org.minioasis.library.jooq.Indexes;
import org.minioasis.library.jooq.Keys;
import org.minioasis.library.jooq.tables.records.CheckoutRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Checkout extends TableImpl<CheckoutRecord> {

    private static final long serialVersionUID = 610573638;

    /**
     * The reference instance of <code>CHECKOUT</code>
     */
    public static final Checkout CHECKOUT = new Checkout();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CheckoutRecord> getRecordType() {
        return CheckoutRecord.class;
    }

    /**
     * The column <code>CHECKOUT.ID</code>.
     */
    public final TableField<CheckoutRecord, Long> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>CHECKOUT.CHECKOUT_DATE</code>.
     */
    public final TableField<CheckoutRecord, Date> CHECKOUT_DATE = createField(DSL.name("CHECKOUT_DATE"), org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>CHECKOUT.DONE</code>.
     */
    public final TableField<CheckoutRecord, Date> DONE = createField(DSL.name("DONE"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>CHECKOUT.DUE_DATE</code>.
     */
    public final TableField<CheckoutRecord, Date> DUE_DATE = createField(DSL.name("DUE_DATE"), org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>CHECKOUT.FINE_PAID_AMOUNT</code>.
     */
    public final TableField<CheckoutRecord, BigDecimal> FINE_PAID_AMOUNT = createField(DSL.name("FINE_PAID_AMOUNT"), org.jooq.impl.SQLDataType.DECIMAL(12, 2), this, "");

    /**
     * The column <code>CHECKOUT.FINE_PAID_DATE</code>.
     */
    public final TableField<CheckoutRecord, Date> FINE_PAID_DATE = createField(DSL.name("FINE_PAID_DATE"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>CHECKOUT.LOST_AND_DAMAGE_FINE_AMOUNT</code>.
     */
    public final TableField<CheckoutRecord, BigDecimal> LOST_AND_DAMAGE_FINE_AMOUNT = createField(DSL.name("LOST_AND_DAMAGE_FINE_AMOUNT"), org.jooq.impl.SQLDataType.DECIMAL(12, 2), this, "");

    /**
     * The column <code>CHECKOUT.LOST_OR_DAMAGE_PAID_DATE</code>.
     */
    public final TableField<CheckoutRecord, Date> LOST_OR_DAMAGE_PAID_DATE = createField(DSL.name("LOST_OR_DAMAGE_PAID_DATE"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>CHECKOUT.RENEWED_NO</code>.
     */
    public final TableField<CheckoutRecord, Byte> RENEWED_NO = createField(DSL.name("RENEWED_NO"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>CHECKOUT.STATE</code>.
     */
    public final TableField<CheckoutRecord, String> STATE = createField(DSL.name("STATE"), org.jooq.impl.SQLDataType.CHAR(40).nullable(false), this, "");

    /**
     * The column <code>CHECKOUT.ITEM_ID</code>.
     */
    public final TableField<CheckoutRecord, Long> ITEM_ID = createField(DSL.name("ITEM_ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>CHECKOUT.PATRON_ID</code>.
     */
    public final TableField<CheckoutRecord, Long> PATRON_ID = createField(DSL.name("PATRON_ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>CHECKOUT</code> table reference
     */
    public Checkout() {
        this(DSL.name("CHECKOUT"), null);
    }

    /**
     * Create an aliased <code>CHECKOUT</code> table reference
     */
    public Checkout(String alias) {
        this(DSL.name(alias), CHECKOUT);
    }

    /**
     * Create an aliased <code>CHECKOUT</code> table reference
     */
    public Checkout(Name alias) {
        this(alias, CHECKOUT);
    }

    private Checkout(Name alias, Table<CheckoutRecord> aliased) {
        this(alias, aliased, null);
    }

    private Checkout(Name alias, Table<CheckoutRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Checkout(Table<O> child, ForeignKey<O, CheckoutRecord> key) {
        super(child, key, CHECKOUT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_CHECKOUT_ITEM_INDEX_8, Indexes.FK_CHECKOUT_PATRON_INDEX_8, Indexes.PRIMARY_KEY_8);
    }

    @Override
    public Identity<CheckoutRecord, Long> getIdentity() {
        return Keys.IDENTITY_CHECKOUT;
    }

    @Override
    public UniqueKey<CheckoutRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_8;
    }

    @Override
    public List<UniqueKey<CheckoutRecord>> getKeys() {
        return Arrays.<UniqueKey<CheckoutRecord>>asList(Keys.CONSTRAINT_8);
    }

    @Override
    public List<ForeignKey<CheckoutRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CheckoutRecord, ?>>asList(Keys.FK_CHECKOUT_ITEM, Keys.FK_CHECKOUT_PATRON);
    }

    public Item item() {
        return new Item(this, Keys.FK_CHECKOUT_ITEM);
    }

    public Patron patron() {
        return new Patron(this, Keys.FK_CHECKOUT_PATRON);
    }

    @Override
    public Checkout as(String alias) {
        return new Checkout(DSL.name(alias), this);
    }

    @Override
    public Checkout as(Name alias) {
        return new Checkout(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Checkout rename(String name) {
        return new Checkout(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Checkout rename(Name name) {
        return new Checkout(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Date, Date, Date, BigDecimal, Date, BigDecimal, Date, Byte, String, Long, Long> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
