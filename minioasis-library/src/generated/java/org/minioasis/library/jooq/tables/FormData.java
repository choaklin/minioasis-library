/*
 * This file is generated by jOOQ.
 */
package org.minioasis.library.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.minioasis.library.jooq.DefaultSchema;
import org.minioasis.library.jooq.Indexes;
import org.minioasis.library.jooq.Keys;
import org.minioasis.library.jooq.tables.records.FormDataRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FormData extends TableImpl<FormDataRecord> {

    private static final long serialVersionUID = -2136504022;

    /**
     * The reference instance of <code>FORM_DATA</code>
     */
    public static final FormData FORM_DATA = new FormData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FormDataRecord> getRecordType() {
        return FormDataRecord.class;
    }

    /**
     * The column <code>FORM_DATA.ID</code>.
     */
    public final TableField<FormDataRecord, Long> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>FORM_DATA.DATA</code>.
     */
    public final TableField<FormDataRecord, String> DATA = createField(DSL.name("DATA"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>FORM_DATA.DATA_TYPE</code>.
     */
    public final TableField<FormDataRecord, String> DATA_TYPE = createField(DSL.name("DATA_TYPE"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * Create a <code>FORM_DATA</code> table reference
     */
    public FormData() {
        this(DSL.name("FORM_DATA"), null);
    }

    /**
     * Create an aliased <code>FORM_DATA</code> table reference
     */
    public FormData(String alias) {
        this(DSL.name(alias), FORM_DATA);
    }

    /**
     * Create an aliased <code>FORM_DATA</code> table reference
     */
    public FormData(Name alias) {
        this(alias, FORM_DATA);
    }

    private FormData(Name alias, Table<FormDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private FormData(Name alias, Table<FormDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> FormData(Table<O> child, ForeignKey<O, FormDataRecord> key) {
        super(child, key, FORM_DATA);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_1);
    }

    @Override
    public Identity<FormDataRecord, Long> getIdentity() {
        return Keys.IDENTITY_FORM_DATA;
    }

    @Override
    public UniqueKey<FormDataRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_1;
    }

    @Override
    public List<UniqueKey<FormDataRecord>> getKeys() {
        return Arrays.<UniqueKey<FormDataRecord>>asList(Keys.CONSTRAINT_1);
    }

    @Override
    public FormData as(String alias) {
        return new FormData(DSL.name(alias), this);
    }

    @Override
    public FormData as(Name alias) {
        return new FormData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FormData rename(String name) {
        return new FormData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FormData rename(Name name) {
        return new FormData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
