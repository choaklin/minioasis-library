/*
 * This file is generated by jOOQ.
*/
package org.minioasis.library.jooq.tables;


import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.minioasis.library.jooq.Indexes;
import org.minioasis.library.jooq.Keys;
import org.minioasis.library.jooq.Public;
import org.minioasis.library.jooq.tables.records.JournalEntryRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JournalEntry extends TableImpl<JournalEntryRecord> {

    private static final long serialVersionUID = 709377887;

    /**
     * The reference instance of <code>PUBLIC.JOURNAL_ENTRY</code>
     */
    public static final JournalEntry JOURNAL_ENTRY = new JournalEntry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JournalEntryRecord> getRecordType() {
        return JournalEntryRecord.class;
    }

    /**
     * The column <code>PUBLIC.JOURNAL_ENTRY.ID</code>.
     */
    public final TableField<JournalEntryRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.JOURNAL_ENTRY.CREATED</code>.
     */
    public final TableField<JournalEntryRecord, Timestamp> CREATED = createField("CREATED", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>PUBLIC.JOURNAL_ENTRY.CREATED_BY</code>.
     */
    public final TableField<JournalEntryRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>PUBLIC.JOURNAL_ENTRY.DESCRIPTION</code>.
     */
    public final TableField<JournalEntryRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.JOURNAL_ENTRY.TOTAL</code>.
     */
    public final TableField<JournalEntryRecord, BigDecimal> TOTAL = createField("TOTAL", org.jooq.impl.SQLDataType.DECIMAL(12, 2).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.JOURNAL_ENTRY.TXN_DATE</code>.
     */
    public final TableField<JournalEntryRecord, Date> TXN_DATE = createField("TXN_DATE", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>PUBLIC.JOURNAL_ENTRY.UPDATED</code>.
     */
    public final TableField<JournalEntryRecord, Timestamp> UPDATED = createField("UPDATED", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>PUBLIC.JOURNAL_ENTRY.UPDATED_BY</code>.
     */
    public final TableField<JournalEntryRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>PUBLIC.JOURNAL_ENTRY</code> table reference
     */
    public JournalEntry() {
        this(DSL.name("JOURNAL_ENTRY"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.JOURNAL_ENTRY</code> table reference
     */
    public JournalEntry(String alias) {
        this(DSL.name(alias), JOURNAL_ENTRY);
    }

    /**
     * Create an aliased <code>PUBLIC.JOURNAL_ENTRY</code> table reference
     */
    public JournalEntry(Name alias) {
        this(alias, JOURNAL_ENTRY);
    }

    private JournalEntry(Name alias, Table<JournalEntryRecord> aliased) {
        this(alias, aliased, null);
    }

    private JournalEntry(Name alias, Table<JournalEntryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_E8);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JournalEntryRecord, Long> getIdentity() {
        return Keys.IDENTITY_JOURNAL_ENTRY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JournalEntryRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_E8;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JournalEntryRecord>> getKeys() {
        return Arrays.<UniqueKey<JournalEntryRecord>>asList(Keys.CONSTRAINT_E8);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JournalEntry as(String alias) {
        return new JournalEntry(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JournalEntry as(Name alias) {
        return new JournalEntry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JournalEntry rename(String name) {
        return new JournalEntry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JournalEntry rename(Name name) {
        return new JournalEntry(name, null);
    }
}
