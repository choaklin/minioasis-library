/*
 * This file is generated by jOOQ.
*/
package org.minioasis.library.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.minioasis.library.jooq.Indexes;
import org.minioasis.library.jooq.Keys;
import org.minioasis.library.jooq.Public;
import org.minioasis.library.jooq.tables.records.GroupsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Groups extends TableImpl<GroupsRecord> {

    private static final long serialVersionUID = -1439702014;

    /**
     * The reference instance of <code>PUBLIC.GROUPS</code>
     */
    public static final Groups GROUPS = new Groups();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GroupsRecord> getRecordType() {
        return GroupsRecord.class;
    }

    /**
     * The column <code>PUBLIC.GROUPS.ID</code>.
     */
    public final TableField<GroupsRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.GROUPS.CODE</code>.
     */
    public final TableField<GroupsRecord, String> CODE = createField("CODE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>PUBLIC.GROUPS.NAME</code>.
     */
    public final TableField<GroupsRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>PUBLIC.GROUPS</code> table reference
     */
    public Groups() {
        this(DSL.name("GROUPS"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.GROUPS</code> table reference
     */
    public Groups(String alias) {
        this(DSL.name(alias), GROUPS);
    }

    /**
     * Create an aliased <code>PUBLIC.GROUPS</code> table reference
     */
    public Groups(Name alias) {
        this(alias, GROUPS);
    }

    private Groups(Name alias, Table<GroupsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Groups(Name alias, Table<GroupsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_7D, Indexes.UK_16FAME6JE5OYJNCQMBL1N5177_INDEX_7);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<GroupsRecord, Long> getIdentity() {
        return Keys.IDENTITY_GROUPS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GroupsRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7D;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GroupsRecord>> getKeys() {
        return Arrays.<UniqueKey<GroupsRecord>>asList(Keys.CONSTRAINT_7D, Keys.UK_16FAME6JE5OYJNCQMBL1N5177);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Groups as(String alias) {
        return new Groups(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Groups as(Name alias) {
        return new Groups(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Groups rename(String name) {
        return new Groups(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Groups rename(Name name) {
        return new Groups(name, null);
    }
}
