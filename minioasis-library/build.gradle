buildscript {
	ext {
		springBootVersion = '2.0.8.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jooq:jooq-codegen:3.10.8")
		classpath("com.h2database:h2:1.4.197")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'org.minioasis'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.data:spring-data-rest-hal-browser'
	
	implementation 'commons-fileupload:commons-fileupload:1.3.3'
	implementation 'commons-io:commons-io:2.6'
	
	implementation 'com.fasterxml.jackson.core:jackson-core:2.9.8'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
	implementation('org.jooq:jooq-codegen:3.10.8')
	
	runtimeOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

// Use your favourite XML builder to construct the code generation configuration file
// ----------------------------------------------------------------------------------
def writer = new StringWriter()
def xml = new groovy.xml.MarkupBuilder(writer).configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.10.0.xsd') {
	jdbc() {
		driver('org.h2.Driver')
		url('jdbc:h2:~/testdb')
		user('sa')
		password('')
	}
	generator() {
		database() {
		}
		// Watch out for this caveat when using MarkupBuilder with "reserved names"
		// - https://github.com/jOOQ/jOOQ/issues/4797
		// - http://stackoverflow.com/a/11389034/521799
		// - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
		generate([:]) {
			pojos true
			daos true
		}
		target() {
			packageName('org.minioasis.library.jooq')
			directory('src/main/java')
		}
	}
}

// Run the code generator
// ----------------------
org.jooq.util.GenerationTool.generate(
	javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
)
